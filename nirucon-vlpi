#!/bin/bash

# Nirucon-VLPI: Post Install script for Void Linux
# Author: Nicklas Rudolfsson
# Version: 2024-08-03
# License: Feel free to use and modify, donate if you want :) https://www.paypal.com/paypalme/nicklasrudolfsson
# Disclaimer: I do not have any responsibility at all for this script and changes on your system!

# Function: Check for internet connection
check_internet_connection() {
    if ping -q -c 1 -W 1 google.com >/dev/null; then
        echo -e "\e[32mInternet connection: OK\e[0m"
    else
        echo -e "\e[31mInternet connection: DOWN\e[0m"
        echo -e "\e[31mThis script requires an active internet connection. Please resolve the issue and run the script again.\e[0m"
        exit 1
    fi
}

# Function: Display welcome message
display_welcome() {
    clear
    echo -e "\e[1;34mWelcome to the Nirucon-VLPI Post Install script for Void Linux\e[0m"
    echo -e "\e[1;31mDisclaimer: Use at your own risk. The author does not have any responsibility at all for this script and changes on your system!\e[0m"
    echo "--------------------------------------------------------------------------"
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the post installation on your Void Linux? [Y/n]: " confirm_install
    confirm_install="${confirm_install,,}" # Convert to lowercase
    if [[ "$confirm_install" == "n" ]]; then
        echo -e "\e[31mInstallation aborted.\e[0m"
        exit 0
    fi
    echo "Proceeding with installation..."
}

# Function: Install repos
install_repos() {
    echo "Adding nonfree repository..."

    # Update package list and install nonfree repository
    sudo xbps-install -Syu
    sudo xbps-install -y void-repo-nonfree

    echo -e "\e[32mNonfree repository and tools installed successfully.\e[0m"
}

# Function: Install core dependencies for suckless (dwm, st, dmenu, slock), minimal Xorg setup and essential packages
install_core_suckless() {
    echo "Installing core dependencies for suckless, minimal Xorg setup and some essential packages..."

    # Update package list and install core dependencies
    sudo xbps-install -Syu
    sudo xbps-install -y base-devel libX11-devel libXft-devel libXinerama-devel \
        libXrandr-devel imlib2-devel freetype-devel fontconfig-devel xorg-minimal \
        xorg-fonts xsetroot setxkbmap xrdb nano unzip wget nitrogen picom alsa-utils \
        cmus mpc wpa_supplicant NetworkManager calcurse xbacklight connman curl dunst \
        pamixer spotifyd playerctl jq rofi fastfetch
    
    echo -e "\e[32mCore dependencies for suckless, minimal Xorg setup, and essential packages installed!\e[0m"
}

# Function: Clone and install nirucon-suckless and related files, scripts, and dot files
install_suckless() {
    echo "Installing nirucon-suckless, configurations and scripts..."
    mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless ~/Git/nirucon-suckless
    mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

    declare -a repos=("nirubar-dwm-void" "dunstrc" "srplay-dmenu" "dwmexit-dmenu" "havamal")
    for repo in "${repos[@]}"; do
        rm -rf ~/Git/$repo
        git clone https://github.com/nirucon/$repo ~/Git/$repo
    done

    cp -rf ~/Git/nirubar-dwm-void/ ~/Git/nirucon-suckless/dmenu ~/Git/nirucon-suckless/st ~/Git/nirucon-suckless/slock ~/Git/nirucon-suckless/dwm ~/.config/suckless
    cp -rf ~/Git/dunstrc/* ~/.config/dunst
    cp -fr ~/Git/nirucon-suckless/nirucon-greeter ~/.config/
    sudo cp -fr ~/Git/nirucon-suckless/fonts/* /usr/share/fonts/

    declare -a suckless_dirs=("dwm" "dmenu" "slock" "st")
    for dir in "${suckless_dirs[@]}"; do
        sudo make -C ~/.config/suckless/$dir clean install
    done

    cp -f ~/Git/nirucon-suckless/.xinitrc ~/
    cp -f ~/Git/nirucon-suckless/autostart.sh ~/.dwm
    cp -f ~/Git/nirucon-suckless/.bashrc ~/
    cp -f ~/Git/nirucon-suckless/.bash_aliases_void ~/
    cp -rf ~/Git/nirucon-suckless/nirucon-wallpapers ~/Pictures/
    sudo cp -f ~/Git/nirucon-suckless/issue /etc/
    chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm-void/nirubar-dwm-void ~/.config/nirucon-greeter/greeter

    # Insert nirubar-dwm in .xinitrc
    line_to_insert="~/.config/suckless/nirubar-dwm-void/nirubar-dwm-void &"
    comment_line="# Start nirubar-dwm-*"
    if [[ -f ~/.xinitrc ]]; then
        sed -i "/$comment_line/a $line_to_insert" ~/.xinitrc
        echo -e "\e[32mLine inserted successfully.\e[0m"
    else
        echo -e "\e[31m~/.xinitrc not found. Please ensure you have the file in your home directory.\e[0m"
    fi

    # srplay-dmenu - dmenu script for SR play podcasts and radio
    echo "Cloning and installing the 'srplay-dmenu' script..."
    rm -rf ~/Git/srplay-dmenu
    git clone https://github.com/nirucon/srplay-dmenu ~/Git/srplay-dmenu
    sudo cp -f ~/Git/srplay-dmenu/srplay-dmenu /usr/local/bin/
    sudo chmod +x /usr/local/bin/srplay-dmenu
    rm -rf ~/Git/srplay-dmenu

    # dwmexit-dmenu - dmenu script for suspend, logout, restart, reboot
    # placeholder

    # havamal - script for random quotes in .bashrc
    echo "Installing havamal script..."
    rm -rf ~/Git/havamal
    git clone https://github.com/nirucon/havamal ~/Git/havamal
    mkdir -p ~/.config/havamal
    cp -fr ~/Git/havamal/* ~/.config/havamal/
    chmod +x ~/.config/havamal/havamal
    rm -rf ~/Git/havamal
    echo -e "\e[32mThe 'havamal' script has been installed and the repository has been removed.\e[0m"

    echo -e "\e[32mNirucon-suckless, configurations and scripts installed successfully.\e[0m"
}

# Function: Check if a package is installed
is_installed() {
    xbps-query -l | grep -qw "$1"
    return $?
}

# Function: Install optional packages
install_optional_packages() {
    declare -a packages=("firefox" "surf" "thunderbird" "bluefish" "filezilla")
    declare -a not_installed_packages=()
    declare -a selected_packages=()
    declare package_choice

    echo "Optional Packages Installation"
    echo "Checking for already installed packages..."

    for package in "${packages[@]}"; do
        if ! is_installed "$package"; then
            not_installed_packages+=("$package")
        fi
    done

    if [[ ${#not_installed_packages[@]} -eq 0 ]]; then
        echo "All optional packages are already installed."
        return
    fi

    echo "Please answer with [Y]yes / [n]no (Yes is default if pressing enter) for each package."

    for package in "${not_installed_packages[@]}"; do
        read -p "Do you want to install $package? [Y/n]: " package_choice
        package_choice="${package_choice,,}" # Convert to lowercase
        if [[ "$package_choice" =~ ^(yes|y| ) ]] || [[ -z "$package_choice" ]]; then
            selected_packages+=("$package")
        fi
    done

    if [[ ${#selected_packages[@]} -eq 0 ]]; then
        echo -e "\e[31mNo optional packages selected for installation.\e[0m"
        return
    fi

    echo "These packages will be installed:"
    for package in "${selected_packages[@]}"; do
        echo "- $package"
    done

    while true; do
        read -p "Are you sure you want to install all these? [Y]yes / [n]no / [c]choose again: " final_choice
        final_choice="${final_choice,,}" # Convert to lowercase
        if [[ "$final_choice" =~ ^(yes|y| ) ]] || [[ -z "$final_choice" ]]; then
            sudo xbps-install -y "${selected_packages[@]}"
            echo -e "\e[32mSelected packages installed.\e[0m"
            break
        elif [[ "$final_choice" == "no" || "$final_choice" == "n" ]]; then
            echo -e "\e[31mInstallation of optional packages aborted.\e[0m"
            break
        elif [[ "$final_choice" == "choose" || "$final_choice" == "c" ]]; then
            install_optional_packages
            break
        else
            echo -e "\e[31mInvalid choice. Please select [Y]yes / [n]no / [c]choose again.\e[0m"
        fi
    done
}

# Function: Install and set the Rofi custom theme
install_rofi_theme() {
    echo "Installing and setting the Rofi custom theme..."
    
    sudo mkdir -p /usr/share/rofi/themes
    mkdir -p ~/.config/rofi

    wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
    if [ $? -eq 0 ]; then
        sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
    else
        echo -e "\e[31mFailed to download Rofi theme. Please check the URL or your internet connection.\e[0m"
        exit 1
    fi

    wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
    if [ $? -eq 0 ]; then
        mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
    else
        echo -e "\e[31mFailed to download default Rofi configuration. Please check the URL or your internet connection.\e[0m"
        exit 1
    fi

    echo -e "\e[32mRofi theme and configuration installed successfully.\e[0m"
}

# Function: Prompt for reboot
prompt_reboot() {
    read -p "Nirucon-VLPI is now installed. Start with: startx, but it's highly recommended to reboot. Do you want to reboot now? [Y/n]: " reboot_choice
    reboot_choice="${reboot_choice,,}"
    if [[ "$reboot_choice" =~ ^(yes|y| ) ]] || [[ -z "$reboot_choice" ]]; then
        sudo reboot
    fi
}

# Main function
main() {
    display_welcome
    check_internet_connection
    confirm_proceed
    install_repos
    install_core_suckless
    install_suckless
    install_optional_packages
    install_rofi_theme
    prompt_reboot
}

# Run the main function
main
