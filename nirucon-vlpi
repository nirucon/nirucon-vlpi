#!/bin/bash

# Void Linux Post Install script by Nicklas Rudolfsson
# https://github.com/nirucon
# The script is made for my own needs but is free to use and modify
# Focus of the script: suckless dwm setup, dmenu scripts, noir theming, music and content creation applications + some extra stuff

# Function: Check for internet connection
check_internet_connection() {
    if ping -q -c 1 -W 1 google.com >/dev/null; then
        echo -e "\e[32mInternet connection: OK\e[0m"
    else
        echo -e "\e[31mInternet connection: DOWN\e[0m"
        echo "This script requires an active internet connection. Please resolve the issue and run the script again."
        exit 1
    fi
}

# Function: Display welcome message
display_welcome() {
    echo "Welcome to NIRUCON-VLPI - Nicklas Rudolfsson's post-install script of 'My Suckless Setup' for Void Linux."
    echo "This is tailored for MY own needs (focus on noir theming and music and media production). Feel free to use and modify, but I disclaim all responsibility; proceed at your own risk!"
    echo "Contact: n@rudolfsson.net"
    echo "Script version: 2024-08-02.01"
    echo ""
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    if [[ "$confirm_install" != [Nn]* ]]; then
        echo "Proceeding with installation..."
    else
        echo "Installation aborted."
        exit 0
    fi
}

# Function: Install necessary packages if not already installed
install_if_needed() {
    if ! command -v "$1" &>/dev/null; then
        echo "Installing $1..."
        sudo xbps-install -S "$1"
    else
        echo "$1 is already installed"
    fi
}

# Function: Optimize system settings
optimize_system_conf() {
    sudo xbps-install -Rs void-repo-nonfree &
    sudo xbps-install -Syu
}

# Function: Install essential packages via xbps
install_packages() {
    local packages=(
        base-devel xorg xinit noto-fonts-ttf noto-fonts-emoji playerctl
        qt6ct breeze-icons pcmanfm arandr nitrogen picom openssh cmus scrot gnupg
        pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
        libX11-devel libXinerama-devel libXft-devel freetype-devel libXext-devel font-awesome curl playerctl
    )

    echo "Installing essential packages via xbps..."
    sudo xbps-install -Sy "${packages[@]}"
}

# Function: Install Brave browser from official repository
install_brave_browser() {
    sudo xbps-install -Sy brave-browser
}

# Function: Install Spotify from official repository
install_spotify() {
    sudo xbps-install -Sy spotify
}

# Function: Install Nextcloud client from official repository
install_nextcloud_client() {
    sudo xbps-install -Sy nextcloud-client
}

# Function: Install Reaper from official website
install_reaper() {
    wget -O ~/Downloads/reaper.tar.xz http://www.reaper.fm/files/6.x/reaper_linux_x86_64.tar.xz
    tar -xvf ~/Downloads/reaper.tar.xz -C ~/Downloads
    sudo ~/Downloads/reaper_linux_x86_64/install-reaper.sh
    rm -rf ~/Downloads/reaper*
}

# Function: Install latest qpwgraph from GitHub
install_qpwgraph() {
    sudo xbps-install -Sy cmake qt5 qmake
    rm -rf ~/Git/qpwgraph
    git clone https://github.com/rdunst/qpwgraph.git ~/Git/qpwgraph
    cd ~/Git/qpwgraph
    mkdir build
    cd build
    cmake ..
    make
    sudo make install
}

# Function: Install latest yabridge and yabridgectl from GitHub
install_yabridge() {
    sudo xbps-install -Sy wine
    wget -O ~/Downloads/yabridge.tar.gz https://github.com/robbert-vdh/yabridge/releases/latest/download/yabridge-x86_64-linux-gnu.tar.gz
    tar -xzf ~/Downloads/yabridge.tar.gz -C ~/Downloads
    sudo ~/Downloads/yabridge-x86_64-linux-gnu/install-yabridge.sh
    rm -rf ~/Downloads/yabridge*
}

# Function: Install LV2 and VST3 plugins from official repositories
install_daw_plugins() {
    sudo xbps-install -Sy lv2
    wget -O ~/Downloads/vst3sdk.tar.gz https://download.steinberg.net/sdk_downloads/vst3sdk-3.7.4_build-197.zip
    unzip ~/Downloads/vst3sdk.tar.gz -d ~/Downloads
    sudo mv ~/Downloads/VST_SDK/VST3_SDK /usr/local/vst3sdk
    rm -rf ~/Downloads/vst3sdk*
}

# Function: Install optional packages based on user choice
install_optional() {
    local prompt="$1"
    local function_name="$2"

    read -p "$prompt [Y/n]: " install_response
    install_response="${install_response,,}" # Convert to lowercase

    if [[ "$install_response" == "y" ]] || [[ -z "$install_response" ]]; then
        $function_name
    else
        echo "Skipping installation for this option."
    fi
}

# Function: Clone and install nirucon-suckless and related files, scripts and dot files
install_suckless() {
    read -p "Do you want to install suckless dwm, dmenu, st, slock and related configurations, dotfiles and some dmenu scripts? [Y/n]: " choice
    if [[ "$choice" == [Yy]* ]] || [[ -z "$choice" ]]; then
        echo "Installing Suckless utilities and configurations..."
        mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless ~/Git/nirucon-suckless
        mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/.config/dunst

        declare -a repos=("nirubar-dwm-void" "dunstrc" "nirucon-dmenu" "sverigesradio-dmenu" "srpod-dmenu" "srplay-dmenu" "dwmexit-dmenu" "havamal" "wifi-dmenu" "system-optimizer-dmenu")
        for repo in "${repos[@]}"; do
            rm -rf ~/Git/$repo
            git clone https://github.com/nirucon/$repo ~/Git/$repo
        done

        cp -rf ~/Git/nirubar-dwm-void/ ~/Git/nirucon-suckless/dmenu ~/Git/nirucon-suckless/st ~/Git/nirucon-suckless/slock ~/Git/nirucon-suckless/dwm ~/.config/suckless
        cp -rf ~/Git/dunstrc/* ~/.config/dunst
        cp -fr ~/Git/nirucon-suckless/nirucon-greeter ~/.config/

        declare -a suckless_dirs=("dwm" "dmenu" "slock" "st")
        for dir in "${suckless_dirs[@]}"; do
            sudo make -C ~/.config/suckless/$dir clean install
        done

        cp -f ~/Git/nirucon-suckless/.xinitrc ~/
        cp -f ~/Git/nirucon-suckless/autostart.sh ~/.dwm
        cp -f ~/Git/nirucon-suckless/.bashrc ~/
        cp -f ~/Git/nirucon-suckless/.bash_aliases_void ~/
        cp -rf ~/Git/nirucon-suckless/nirucon-wallpapers ~/Pictures/
        sudo cp -f ~/Git/nirucon-suckless/issue /etc/
        chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm-void/nirubar-dwm-void ~/.config/nirucon-greeter/greeter

        # Insert nirubar-dwm in .xinitrc
        line_to_insert="~/.config/suckless/nirubar-dwm/nirubar-dwm-void &"
        comment_line="# Start nirubar-dwm-*"
        if [[ -f ~/.xinitrc ]]; then
          sed -i "/$comment_line/a $line_to_insert" ~/.xinitrc
          echo "Line inserted successfully."
        else
          echo "~/.xinitrc not found. Please ensure you have the file in your home directory."
        fi

        # nirucon-dmenu - dmenu scripts launcher
        echo "Cloning and installing the 'nirucon-dmenu' script..."
        rm -rf ~/Git/nirucon-dmenu
        git clone https://github.com/nirucon/nirucon-dmenu ~/Git/nirucon-dmenu
        sudo cp -f ~/Git/nirucon-dmenu/nirucon-dmenu-scripts-launcher /usr/local/bin/
        sudo chmod +x /usr/local/bin/nirucon-dmenu-scripts-launcher
        rm -rf ~/Git/nirucon-dmenu

        # sverigesradio-dmenu - dmenu script for sveriges radio
        echo "Cloning and installing the 'sverigesradio-dmenu' script..."
        rm -rf ~/Git/sverigesradio-dmenu
        git clone https://github.com/nirucon/sverigesradio-dmenu ~/Git/sverigesradio-dmenu
        sudo cp -f ~/Git/sverigesradio-dmenu/sverigesradio-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/sverigesradio-dmenu
        rm -rf ~/Git/sverigesradio-dmenu

        # srpod-dmenu - dmenu script for sr play pod
        echo "Cloning and installing the 'srpod-dmenu' script..."
        rm -rf ~/Git/srpod-dmenu
        git clone https://github.com/nirucon/srpod-dmenu ~/Git/srpod-dmenu
        sudo cp -f ~/Git/srpod-dmenu/srpod-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srpod-dmenu
        rm -rf ~/Git/srpod-dmenu

        # srplay-dmenu - dmenu script for sr play podcasts and radio
        echo "Cloning and installing the 'srplay-dmenu' script..."
        rm -rf ~/Git/srplay-dmenu
        git clone https://github.com/nirucon/srplay-dmenu ~/Git/srplay-dmenu
        sudo cp -f ~/Git/srplay-dmenu/srplay-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srplay-dmenu
        rm -rf ~/Git/srplay-dmenu

        # dwmexit-dmenu - dmenu script for suspend, logout, restart, reboot
        echo "Installing dwmexit-dmenu script..."
        rm -rf ~/Git/dwmexit-dmenu
        git clone https://github.com/nirucon/dwmexit-dmenu ~/Git/dwmexit-dmenu
        sudo cp -f ~/Git/dwmexit-dmenu/dwmexit-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/dwmexit-dmenu
        rm -rf ~/Git/dwmexit-dmenu

        # havamal - script for random quotes in .bashrc
        echo "Installing havamal script..."
        rm -rf ~/Git/havamal
        git clone https://github.com/nirucon/havamal ~/Git/havamal
        mkdir -p ~/.config/havamal
        cp -fr ~/Git/havamal/* ~/.config/havamal/
        chmod +x ~/.config/havamal/havamal
        rm -rf ~/Git/havamal
        echo "The 'havamal' script has been installed and the repository has been removed."

        # wifi-dmenu - script for wifi in dmenu
        echo "Installing wifi-dmenu script..."
        rm -rf ~/Git/wifi-dmenu
        git clone https://github.com/nirucon/wifi-dmenu ~/Git/wifi-dmenu
        sudo cp -f ~/Git/wifi-dmenu/wifi-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/wifi-dmenu
        rm -rf ~/Git/wifi-dmenu

        # system-optimizer-dmenu - script for optimizing system in dmenu
        echo "Installing system-optimizer-dmenu script..."
        rm -rf ~/Git/system-optimizer-dmenu
        git clone https://github.com/nirucon/system-optimizer-dmenu ~/Git/system-optimizer-dmenu
        sudo cp -f ~/Git/system-optimizer-dmenu/system-optimizer-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/system-optimizer-dmenu
        rm -rf ~/Git/system-optimizer-dmenu

        echo "Suckless utilities and configurations installed successfully."
    else
        echo "Skipping Suckless utilities installation."
    fi
}

# Function: Install custom GRUB theme
install_grub_theme() {
    read -p "Do you want to install a custom grub theme - nirucon-death? [Y/n]: " grub_response
    grub_response=${grub_response,,}

    if [[ "$grub_response" =~ ^(yes|y| ) ]] || [[ -z "$grub_response" ]]; then
        echo "Installing custom grub theme..."
        git clone https://github.com/nirucon/nirucon-death-grubtheme ~/Git/nirucon-death-grubtheme
        sudo mkdir -p /boot/grub/themes
        sudo cp -r ~/Git/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
        sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
        sudo update-grub
        echo "Custom grub theme installed."
    else
        echo "Skipping custom grub theme installation."
    fi
}

# Function: Install Graphite GTK Theme (Dark), Tela Circle Icons (Black) and nirucon Rofi Custom Theme
install_themes_icons() {
    read -r -p "Do you want to install the GTK theme and icons? [Y/n]: " gtk_response
    gtk_response=${gtk_response,,}
    read -r -p "Do you want to install the Rofi custom theme? [Y/n]: " rofi_response
    rofi_response=${rofi_response,,}

    if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]]; then
        echo "Installing Graphite GTK theme (Dark)..."
        git clone https://github.com/vinceliuice/Graphite-gtk-theme
        if [ -d "Graphite-gtk-theme" ]; then
            cd Graphite-gtk-theme
            sudo ./install.sh -d /usr/share/themes -c dark
            cd ..
            rm -rf Graphite-gtk-theme
        else
            echo "Failed to clone Graphite GTK theme repository. Please check your internet connection."
            exit 1
        fi

        echo "Installing Tela Circle icon theme (Black)..."
        git clone https://github.com/vinceliuice/Tela-circle-icon-theme
        if [ -d "Tela-circle-icon-theme" ]; then
            cd Tela-circle-icon-theme
            sudo ./install.sh -a
            cd ..
            rm -rf Tela-circle-icon-theme
        else
            echo "Failed to clone Tela Circle icon theme repository. Please check your internet connection."
            exit 1
        fi

        # Ensure the themes and icons are correctly set in the configuration files
        echo "Ensuring themes and icons are correctly set in the configuration files..."

        mkdir -p ~/.config/gtk-3.0/
        mkdir -p ~/.config/gtk-4.0/

        # GTK2 settings
        echo 'gtk-theme-name="Graphite-Dark"' > ~/.gtkrc-2.0
        echo 'gtk-icon-theme-name="Tela-circle-black"' >> ~/.gtkrc-2.0

        # GTK3 settings
        cat <<EOF > ~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Graphite-Dark
gtk-icon-theme-name=Tela-circle-black
EOF

        # GTK4 settings
        cat <<EOF > ~/.config/gtk-4.0/settings.ini
[Settings]
gtk-theme-name=Graphite-Dark
gtk-icon-theme-name=Tela-circle-black
EOF

        # Insert environment variables into .xinitrc
        if ! grep -q 'export GTK_THEME="Graphite-Dark"' ~/.xinitrc; then
            sed -i '/# Set default GTK and Icon themes/a \
export GTK_THEME="Graphite-Dark" \
export GTK_ICON_THEME="Tela-circle-black" \
export GTK2_RC_FILES="$HOME/.gtkrc-2.0" \
export GTK3_SETTINGS="$HOME/.config/gtk-3.0/settings.ini" \
export GTK4_SETTINGS="$HOME/.config/gtk-4.0/settings.ini"' ~/.xinitrc
        fi

        echo "Theme set to Graphite-Dark and icon theme set to Tela-circle-black."
    else
        echo "Skipping GTK theme and icons installation."
    fi

    if [[ "$rofi_response" =~ ^(yes|y| ) ]] || [[ -z "$rofi_response" ]]; then
        echo "Installing and setting the Rofi custom theme..."
        sudo mkdir -p /usr/share/rofi/themes
        mkdir -p ~/.config/rofi

        wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
        if [ $? -eq 0 ]; then
            sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
        else
            echo "Failed to download Rofi theme. Please check the URL or your internet connection."
            exit 1
        fi

        wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
        if [ $? -eq 0 ]; then
            mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
        else
            echo "Failed to download default Rofi configuration. Please check the URL or your internet connection."
            exit 1
        fi
    else
        echo "Skipping Rofi custom theme installation."
    fi
}

# Final additions
    echo "Now some final installations, we are soon done..."

# Function: Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function: Install Fastfetch
install_fastfetch() {
    # Check if Fastfetch is already installed
    if command_exists fastfetch; then
        echo "Fastfetch is already installed."
        return
    fi

    # Print info
    echo "Cloning and installing fastfetch..."

    # Install dependencies
    sudo xbps-install -Sy cmake gcc pkg-config

    # Clone Fastfetch repository
    git clone https://github.com/fastfetch-cli/fastfetch.git
    cd fastfetch

    # Build and install Fastfetch
    mkdir -p build
    cd build
    cmake ..
    cmake --build . --target fastfetch
    sudo cmake --install . --prefix /usr/local

    # Cleanup
    cd ../..
    rm -rf fastfetch

    echo "Fastfetch installed successfully!"
}

# Function: Install Mononoki Nerd Font
install_mononoki() {
    # Check if Mononoki Nerd Font is already installed
    if fc-list | grep -i mononoki >/dev/null 2>&1; then
        echo "Mononoki Nerd Font is already installed."
        return
    fi

    # Print info
    echo "Installing mononoki font..."

    # Install fontconfig if not already installed
    sudo xbps-install -Sy fontconfig

    # Create the fonts directory if it doesn't exist
    mkdir -p ~/.local/share/fonts

    # Navigate to the fonts directory
    cd ~/.local/share/fonts

    # Download the Mononoki Nerd Font zip file
    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/Mononoki.zip

    # Unzip the downloaded font file
    unzip Mononoki.zip

    # Remove the zip file after extraction
    rm Mononoki.zip

    # Update the font cache
    fc-cache -fv

    # Print a success message
    echo "Mononoki Nerd Font installed successfully!"
}

# Function: Install pipewire
install_pipewire() {
    # Update repositories and install necessary packages
    sudo xbps-install -S pipewire libspa-bluetooth pipewire-pulse alsa-pipewire

    # Enable Pipewire services
    sudo ln -s /etc/sv/pipewire /var/service/
    sudo ln -s /etc/sv/pipewire-pulse /var/service/

    # Add user to necessary groups
    sudo usermod -aG _pipewire,pulse,pulse-access "$USER"

    # Create configuration directory if it does not exist
    mkdir -p ~/.config/pipewire

    # Copy default Pipewire configuration
    cp /usr/share/pipewire/pipewire.conf ~/.config/pipewire/pipewire.conf

    # Copy default Pipewire PulseAudio configuration
    cp /usr/share/pipewire/pipewire-pulse.conf ~/.config/pipewire/pipewire-pulse.conf

    # Notify user to log out and log back in
    echo "Pipewire installed ---> Log out and log back in for pipewire installation to take effect! <---"

    # Display Pipewire status
    echo "After logging back in, you can check the status of Pipewire using the following command:"
    echo "pactl info"
}

# Main function to execute the script
main() {
    check_internet_connection
    display_welcome
    confirm_proceed

    install_if_needed "git"
    install_if_needed "wget"
    sudo xbps-install -Sy base-devel

    read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
    if [[ "$optimize_choice" != [Nn]* ]]; then
        optimize_system_conf
    fi

    install_packages

    install_optional "Do you want to install Brave browser?" install_brave_browser
    install_optional "Do you want to install Spotify?" install_spotify
    install_optional "Do you want to install Nextcloud client?" install_nextcloud_client
    install_optional "Do you want to install Reaper?" install_reaper
    install_optional "Do you want to install the latest qpwgraph?" install_qpwgraph
    install_optional "Do you want to install the latest yabridge and yabridgectl?" install_yabridge
    install_optional "Do you want to install DAW plugins?" install_daw_plugins

    local web_dev_packages=(filezilla bluefish)
    install_optional "Do you want to install Web development apps (bluefish filezilla)?" web_dev_packages[@]

    local image_video_packages=(obs-studio kdenlive gimp)
    install_optional "Do you want to install Image and Video editing apps (obs-studio kdenlive gimp)?" image_video_packages[@]

    local communication_packages=(thunderbird irssi signal-desktop)
    install_optional "Do you want to install Communication apps (thunderbird irssi signal-desktop)?" communication_packages[@]

    install_suckless
    install_grub_theme
    install_themes_icons
    install_fastfetch
    install_mononoki
    install_pipewire

    echo "Cleaning up temporary files..."
    rm -fr ~/Git/dunstrc ~/Git/nirubar-dwm-void ~/Git/nirucon-suckless ~/Git/nirucon-death-grubtheme

    echo "NIRUCON-VLPI Void Linux Post Install script completed - NOW BE CREATIVE!"
    echo "Start nirucon-suckless with the command: startx"
}

main
