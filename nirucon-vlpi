#!/bin/bash

# Nirucon-VLPI: Post Install script for Void Linux
# Author: Nicklas Rudolfsson
# Version: 2024-08-03
# License: Feel free to use and modify, donate if you want :) https://www.paypal.com/paypalme/nicklasrudolfsson
# Disclaimer: I do not have any responsibility at all for this script and changes on your system!

# Function: Check for internet connection
check_internet_connection() {
    if ping -q -c 1 -W 1 google.com >/dev/null; then
        echo -e "\e[32mInternet connection: OK\e[0m"
    else
        echo -e "\e[31mInternet connection: DOWN\e[0m"
        echo "This script requires an active internet connection. Please resolve the issue and run the script again."
        exit 1
    fi
}

# Function: Display welcome message
display_welcome() {
    clear
    echo -e "\e[1;34mWelcome to the Nirucon-VLPI Post Install script for Void Linux\e[0m"
    echo -e "\e[1;31mDisclaimer: Use at your own risk. The author does not have any responsibility at all for this script and changes on your system!\e[0m"
    echo "--------------------------------------------------------------------------"
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the post installation on your Void Linux? [Y/n]: " confirm_install
    confirm_install="${confirm_install,,}" # Convert to lowercase
    if [[ "$confirm_install" == "n" ]]; then
        echo "Installation aborted."
        exit 0
    fi
    echo "Proceeding with installation..."
}

# Function: Install repos
install_repos() {
    echo "Adding nonfree repository..."

    # Update package list and install nonfree repository
    sudo xbps-install -Syu
    sudo xbps-install -y void-repo-nonfree

    echo "Nonfree repository and tools installed successfully."
}

# Function: Install core dependencies for suckless (dwm, st, dmenu, slock), minimal Xorg setup and essential packages
install_core_suckless() {
    echo "Installing core dependencies for suckless, minimal Xorg setup and some essential packages..."

    # Update package list and install core dependencies
    sudo xbps-install -Syu
    sudo xbps-install -y base-devel libX11-devel libXft-devel libXinerama-devel \
        libXrandr-devel imlib2-devel freetype-devel fontconfig-devel xorg-minimal \
        xorg-fonts xsetroot setxkbmap xrdb nano unzip wget nitrogen picom alsa-utils \
        cmus mpc wpa_supplicant NetworkManager calcurse xbacklight connman curl \
        pamixer spotifyd playerctl jq
    
    echo -e "\e[32mCore dependencies for suckless, minimal Xorg setup, and essential packages installed!\e[0m"
}

# Function: Check and install fonts
install_fonts() {
    local fonts=("FontAwesome" "mononoki")
    local font_dirs=("font-awesome" "mononoki-nerd-font")
    local font_urls=("https://github.com/FortAwesome/Font-Awesome.git" "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Mononoki.zip")

    sudo mkdir -p /usr/share/fonts

    for i in "${!fonts[@]}"; do
        if ! ls /usr/share/fonts/ | grep -iq "${fonts[$i]}"; then
            echo "Installing ${font_dirs[$i]}..."
            if [[ "${font_dirs[$i]}" == "font-awesome" ]]; then
                sudo git clone --depth 1 "${font_urls[$i]}" /tmp/font-awesome
                sudo cp -r /tmp/font-awesome/webfonts/* /usr/share/fonts/
                sudo rm -rf /tmp/font-awesome
            elif [[ "${font_dirs[$i]}" == "mononoki-nerd-font" ]]; then
                sudo mkdir -p /tmp/mononoki-nerd-font
                sudo wget -O /tmp/mononoki-nerd-font.zip "${font_urls[$i]}"
                sudo unzip /tmp/mononoki-nerd-font.zip -d /tmp/mononoki-nerd-font
                sudo cp /tmp/mononoki-nerd-font/*.ttf /usr/share/fonts/
                sudo rm -rf /tmp/mononoki-nerd-font.zip /tmp/mononoki-nerd-font
            fi
            sudo fc-cache -f -v
        else
            echo "${font_dirs[$i]} is already installed."
        fi
    done
}

# Function: Prompt for reboot
prompt_reboot() {
    read -p "Nirucon-VLPI is now installed. Start with: startx, but it's highly recommended to reboot. Do you want to reboot now? [Y/n]: " reboot_choice
    reboot_choice="${reboot_choice,,}"
    if [[ "$reboot_choice" =~ ^(yes|y| ) ]] || [[ -z "$reboot_choice" ]]; then
        sudo reboot
    fi
}

# Main function
main() {
    display_welcome
    check_internet_connection
    confirm_proceed
    install_repos
    install_core_suckless
    install_fonts
    prompt_reboot
}

# Run the main function
main
